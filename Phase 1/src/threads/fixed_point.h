#ifndef FIXED_POINT_H
#define FIXED_POINT_H

// This code in generated by chat-gpt

#include <stdint.h>

#define FIXED_POINT_FRACTIONAL_BITS 14

typedef int fixed_point;

// Conversion functions between integers and fixed-point
static inline fixed_point int_to_f(int n) {
	return n * (1 << FIXED_POINT_FRACTIONAL_BITS);
}

static inline int f_to_int(fixed_point x) {
	return x / (1 << FIXED_POINT_FRACTIONAL_BITS);
}

// Arithmetic operations
static inline fixed_point add_fixed(fixed_point x, fixed_point y) {
	return x + y;
}

static inline fixed_point multiply_fixed(fixed_point x, fixed_point y) {
	return ((int64_t) x) * y / (1 << FIXED_POINT_FRACTIONAL_BITS);
}

static inline fixed_point divide_fixed(fixed_point x, fixed_point y) {
	return ((int64_t) x) * (1 << FIXED_POINT_FRACTIONAL_BITS) / y;
}

static inline fixed_point increment_by_1(fixed_point x) {
	return x + int_to_f(1);
}

// Round to nearest integer function
static inline int Round(fixed_point x) {
	if (x >= 0) {
		return (x + (1 << (FIXED_POINT_FRACTIONAL_BITS - 1)))
				>> FIXED_POINT_FRACTIONAL_BITS;
	} else {
		return (x - (1 << (FIXED_POINT_FRACTIONAL_BITS - 1)))
				>> FIXED_POINT_FRACTIONAL_BITS;
	}
}

#endif
